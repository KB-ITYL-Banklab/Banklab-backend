<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.banklab.financeContents.mapper.UpbitCryptoMapper">

    <!-- Result Map 정의 -->
    <resultMap id="UpbitCryptoResultMap" type="com.banklab.financeContents.dto.UpbitCryptoDTO">
        <id property="id" column="id"/>
        <result property="market" column="market"/>
        <result property="openingPrice" column="opening_price"/>
        <result property="tradePrice" column="trade_price"/>
        <result property="prevClosingPrice" column="prev_closing_price"/>
        <result property="changeRate" column="change_rate"/>
        <result property="accTradeVolume24h" column="acc_trade_volume_24h"/>
        <result property="accTradePrice24h" column="acc_trade_price_24h"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 가상화폐 시세 정보 삽입 -->
    <insert id="insertCrypto" parameterType="com.banklab.financeContents.dto.UpbitCryptoDTO" 
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO finance_upbit (
            market,
            opening_price,
            trade_price,
            prev_closing_price,
            change_rate,
            acc_trade_volume_24h,
            acc_trade_price_24h
        ) VALUES (
            #{market},
            #{openingPrice},
            #{tradePrice},
            #{prevClosingPrice},
            #{changeRate},
            #{accTradeVolume24h},
            #{accTradePrice24h}
        )
    </insert>

    <!-- 여러 가상화폐 시세 정보 일괄 삽입 -->
    <insert id="insertCryptoList" parameterType="java.util.List">
        INSERT INTO finance_upbit (
            market,
            opening_price,
            trade_price,
            prev_closing_price,
            change_rate,
            acc_trade_volume_24h,
            acc_trade_price_24h
        ) VALUES
        <foreach collection="list" item="crypto" separator=",">
            (
                #{crypto.market},
                #{crypto.openingPrice},
                #{crypto.tradePrice},
                #{crypto.prevClosingPrice},
                #{crypto.changeRate},
                #{crypto.accTradeVolume24h},
                #{crypto.accTradePrice24h}
            )
        </foreach>
    </insert>

    <!-- 특정 마켓의 최신 시세 정보 조회 -->
    <select id="selectLatestByMarket" resultMap="UpbitCryptoResultMap">
        SELECT 
            id,
            market,
            opening_price,
            trade_price,
            prev_closing_price,
            change_rate,
            acc_trade_volume_24h,
            acc_trade_price_24h,
            created_at,
            updated_at
        FROM finance_upbit 
        WHERE market = #{market}
        ORDER BY created_at DESC, id DESC 
        LIMIT 1
    </select>

    <!-- 모든 가상화폐의 최신 시세 정보 조회 -->
    <select id="selectAllLatest" resultMap="UpbitCryptoResultMap">
        SELECT 
            id,
            market,
            opening_price,
            trade_price,
            prev_closing_price,
            change_rate,
            acc_trade_volume_24h,
            acc_trade_price_24h,
            created_at,
            updated_at
        FROM finance_upbit f1
        WHERE f1.id = (
            SELECT MAX(f2.id) 
            FROM finance_upbit f2 
            WHERE f2.market = f1.market
        )
        ORDER BY market
    </select>

    <!-- 특정 마켓의 시세 정보 조회 (페이징) -->
    <select id="selectByMarketWithPaging" resultMap="UpbitCryptoResultMap">
        SELECT 
            id,
            market,
            opening_price,
            trade_price,
            prev_closing_price,
            change_rate,
            acc_trade_volume_24h,
            acc_trade_price_24h,
            created_at,
            updated_at
        FROM finance_upbit 
        WHERE market = #{market}
        ORDER BY created_at DESC, id DESC 
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- ID로 특정 시세 정보 조회 -->
    <select id="selectById" resultMap="UpbitCryptoResultMap">
        SELECT 
            id,
            market,
            opening_price,
            trade_price,
            prev_closing_price,
            change_rate,
            acc_trade_volume_24h,
            acc_trade_price_24h,
            created_at,
            updated_at
        FROM finance_upbit 
        WHERE id = #{id}
    </select>

    <!-- 전체 시세 정보 개수 조회 -->
    <select id="selectTotalCount" resultType="int">
        SELECT COUNT(*) FROM finance_upbit
    </select>

    <!-- 특정 마켓의 시세 정보 개수 조회 -->
    <select id="selectCountByMarket" resultType="int">
        SELECT COUNT(*) FROM finance_upbit WHERE market = #{market}
    </select>

    <!-- 특정 날짜 이전의 데이터 삭제 (데이터 정리용) -->
    <delete id="deleteOldData">
        DELETE FROM finance_upbit 
        WHERE created_at < DATE_SUB(NOW(), INTERVAL #{days} DAY)
    </delete>

    <!-- 특정 날짜 범위의 데이터 조회 -->
    <select id="selectByDateRange" resultMap="UpbitCryptoResultMap">
        SELECT 
            id,
            market,
            opening_price,
            trade_price,
            prev_closing_price,
            change_rate,
            acc_trade_volume_24h,
            acc_trade_price_24h,
            created_at,
            updated_at
        FROM finance_upbit 
        WHERE created_at BETWEEN #{startDate} AND #{endDate}
        <if test="market != null and market != ''">
            AND market = #{market}
        </if>
        ORDER BY created_at DESC, id DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 오늘 데이터 조회 -->
    <select id="selectTodayData" resultMap="UpbitCryptoResultMap">
        SELECT 
            id,
            market,
            opening_price,
            trade_price,
            prev_closing_price,
            change_rate,
            acc_trade_volume_24h,
            acc_trade_price_24h,
            created_at,
            updated_at
        FROM finance_upbit 
        WHERE DATE(created_at) = CURDATE()
        <if test="market != null and market != ''">
            AND market = #{market}
        </if>
        ORDER BY created_at DESC, id DESC
    </select>

</mapper>

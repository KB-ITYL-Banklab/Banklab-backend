<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.banklab.transaction.mapper.TransactionMapper">

    <insert id="saveTransaction" parameterType="com.banklab.transaction.domain.TransactionHistoryVO">
        INSERT INTO transaction_history (
            resAccount,
            transaction_date,
            transaction_time,
            resAccountOut,
            resAccountIn,
            resAfterTranBalance,
            description,
            category_id
        )
        VALUES(
               #{resAccount},
               STR_TO_DATE(#{transactionDate}, '%Y%m%d'),
               TIME_FORMAT(#{transactionTime}, '%H%i%s'),
               #{resAccountOut},
               #{resAccountIn},
               #{resAfterTranBalance},
               #{description},
               #{category_id}
              )
    </insert>


    <insert id="saveTransactionList"  parameterType="java.util.List">
        INSERT INTO transaction_history (
        member_id,
        resAccount,
        transaction_date,
        transaction_time,
        resAccountOut,
        resAccountIn,
        resAfterTranBalance,
        description,
        category_id
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
            #{item.memberId},
            #{item.resAccount},
            STR_TO_DATE(#{item.transactionDate}, '%Y%m%d'),
            TIME_FORMAT(#{item.transactionTime}, '%H%i%s'),
            #{item.resAccountOut},
            #{item.resAccountIn},
            #{item.resAfterTranBalance},
            #{item.description},
            #{item.category_id}
            )
        </foreach>
    </insert>

    <select id="getMonthlySummary" resultType="com.banklab.transaction.dto.response.MonthlySummaryDTO">
        SELECT
            #{startDate} AS startDate,
            #{endDate} AS endDate,
            IFNULL(SUM(CASE WHEN resAccountIn > 0 THEN resAccountIn ELSE 0 END), 0) AS totalIncome,
            IFNULL(SUM(CASE WHEN resAccountOut > 0 THEN resAccountOut ELSE 0 END), 0) AS totalExpense
        FROM transaction_history
        WHERE transaction_date BETWEEN #{startDate} AND #{endDate}
          AND resAccount = #{resAccount}
    </select>

    <select id="getDailyExpense" resultType="com.banklab.transaction.dto.response.DailyExpenseDTO">
        <![CDATA[
        WITH RECURSIVE dates AS (
            SELECT #{startDate} AS date
            UNION ALL
            SELECT DATE_ADD(date, INTERVAL 1 DAY)
            FROM dates
            WHERE date < #{endDate}
        )

        SELECT
            d.date,
            DATE_FORMAT(d.date, '%Y-%m') AS yearMonth,  -- ← 월 정보 추가
            IFNULL(SUM(CASE WHEN th.resAccountOut > 0 THEN th.resAccountOut ELSE 0 END), 0) AS totalExpense
        FROM
            dates d
                LEFT JOIN
            transaction_history th
            ON th.transaction_date = d.date
                AND th.resAccount = #{resAccount}
        GROUP BY
            d.date
        ORDER BY
            d.date
        ]]>
    </select>

    <select id="getExpensesByCategory" resultType="com.banklab.category.dto.CategoryExpenseDTO">
        SELECT
            c.id AS categoryId,
            c.name AS categoryName,
            SUM(t.resAccountout) AS totalExpense
        FROM transaction_history t
                 JOIN category c ON t.category_id = c.id
        WHERE t.resAccount=#{resAccount}
          AND t.resAccountOut > 0 -- 지출만
          AND t.transaction_date BETWEEN #{startDate} AND #{endDate}

        GROUP BY c.id, c.name
        ORDER BY totalExpense DESC
    </select>


    <select id="getDailyCategorySummary" resultType="com.banklab.transaction.summary.dto.DailySummaryDTO">
        SELECT *
        FROM daily_user_expense_summary
        WHERE member_id = #{memberId}
          AND category_id = 0
          AND date = #{targetDate}

    </select>
</mapper>
